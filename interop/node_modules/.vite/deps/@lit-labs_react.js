import "./chunk-RSJERJUL.js";

// node_modules/@lit-labs/react/development/create-component.js
var reservedReactProperties = /* @__PURE__ */ new Set([
  "children",
  "localName",
  "ref",
  "style",
  "className"
]);
var listenedEvents = /* @__PURE__ */ new WeakMap();
var addOrUpdateEventListener = (node, event, listener) => {
  let events = listenedEvents.get(node);
  if (events === void 0) {
    listenedEvents.set(node, events = /* @__PURE__ */ new Map());
  }
  let handler = events.get(event);
  if (listener !== void 0) {
    if (handler === void 0) {
      events.set(event, handler = { handleEvent: listener });
      node.addEventListener(event, handler);
    } else {
      handler.handleEvent = listener;
    }
  } else if (handler !== void 0) {
    events.delete(event);
    node.removeEventListener(event, handler);
  }
};
var setProperty = (node, name, value, old, events) => {
  const event = events === null || events === void 0 ? void 0 : events[name];
  if (event !== void 0) {
    if (value !== old) {
      addOrUpdateEventListener(node, event, value);
    }
  } else {
    node[name] = value;
  }
};
var setRef = (ref, value) => {
  if (typeof ref === "function") {
    ref(value);
  } else {
    ref.current = value;
  }
};
var createComponent = (React, tagName, elementClass, events, displayName) => {
  const Component = React.Component;
  const createElement = React.createElement;
  const eventProps = new Set(Object.keys(events !== null && events !== void 0 ? events : {}));
  class ReactComponent extends Component {
    constructor() {
      super(...arguments);
      this._element = null;
    }
    _updateElement(oldProps) {
      if (this._element === null) {
        return;
      }
      for (const prop in this._elementProps) {
        setProperty(this._element, prop, this.props[prop], oldProps ? oldProps[prop] : void 0, events);
      }
    }
    componentDidMount() {
      this._updateElement();
    }
    componentDidUpdate(old) {
      this._updateElement(old);
    }
    render() {
      const userRef = this.props.__forwardedRef;
      if (this._ref === void 0 || this._userRef !== userRef) {
        this._ref = (value) => {
          if (this._element === null) {
            this._element = value;
          }
          if (userRef !== null) {
            setRef(userRef, value);
          }
          this._userRef = userRef;
        };
      }
      const props = { ref: this._ref };
      this._elementProps = {};
      for (const [k, v] of Object.entries(this.props)) {
        if (k === "__forwardedRef")
          continue;
        if (eventProps.has(k) || !reservedReactProperties.has(k) && !(k in HTMLElement.prototype) && k in elementClass.prototype) {
          this._elementProps[k] = v;
        } else {
          props[k === "className" ? "class" : k] = v;
        }
      }
      return createElement(tagName, props);
    }
  }
  ReactComponent.displayName = displayName !== null && displayName !== void 0 ? displayName : elementClass.name;
  const ForwardedComponent = React.forwardRef((props, ref) => createElement(ReactComponent, { ...props, __forwardedRef: ref }, props === null || props === void 0 ? void 0 : props.children));
  ForwardedComponent.displayName = ReactComponent.displayName;
  return ForwardedComponent;
};
export {
  createComponent
};
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
//# sourceMappingURL=@lit-labs_react.js.map
