{
  "version": 3,
  "sources": ["../../@lit-labs/react/src/create-component.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nconst reservedReactProperties = new Set([\n  'children',\n  'localName',\n  'ref',\n  'style',\n  'className',\n]);\n\nconst listenedEvents: WeakMap<\n  Element,\n  Map<string, EventListenerObject>\n> = new WeakMap();\n\n/**\n * Adds an event listener for the specified event to the given node. In the\n * React setup, there should only ever be one event listener. Thus, for\n * efficiency only one listener is added and the handler for that listener is\n * updated to point to the given listener function.\n */\nconst addOrUpdateEventListener = (\n  node: Element,\n  event: string,\n  listener: (event?: Event) => void\n) => {\n  let events = listenedEvents.get(node);\n  if (events === undefined) {\n    listenedEvents.set(node, (events = new Map()));\n  }\n  let handler = events.get(event);\n  if (listener !== undefined) {\n    // If necessary, add listener and track handler\n    if (handler === undefined) {\n      events.set(event, (handler = {handleEvent: listener}));\n      node.addEventListener(event, handler);\n      // Otherwise just update the listener with new value\n    } else {\n      handler.handleEvent = listener;\n    }\n    // Remove listener if one exists and value is undefined\n  } else if (handler !== undefined) {\n    events.delete(event);\n    node.removeEventListener(event, handler);\n  }\n};\n\n/**\n * Sets properties and events on custom elements. These properties and events\n * have been pre-filtered so we know they should apply to the custom element.\n */\nconst setProperty = <E extends Element>(\n  node: E,\n  name: string,\n  value: unknown,\n  old: unknown,\n  events?: Events\n) => {\n  const event = events?.[name];\n  if (event !== undefined) {\n    // Dirty check event value.\n    if (value !== old) {\n      addOrUpdateEventListener(node, event, value as (e?: Event) => void);\n    }\n  } else {\n    // But don't dirty check properties; elements are assumed to do this.\n    node[name as keyof E] = value as E[keyof E];\n  }\n};\n\n// Set a React ref. Note, there are 2 kinds of refs and there's no built in\n// React API to set a ref.\nconst setRef = (ref: React.Ref<unknown>, value: Element | null) => {\n  if (typeof ref === 'function') {\n    (ref as (e: Element | null) => void)(value);\n  } else {\n    (ref as {current: Element | null}).current = value;\n  }\n};\n\ntype Constructor<T> = {new (): T};\n\n/***\n * Typecast that curries an Event type through a string. The goal of the type\n * cast is to match a prop name to a typed event callback.\n */\nexport type EventName<T extends Event = Event> = string & {\n  __event_type: T;\n};\n\ntype Events = Record<string, EventName | string>;\n\ntype EventProps<R extends Events> = {\n  [K in keyof R]: R[K] extends EventName\n    ? (e: R[K]['__event_type']) => void\n    : (e: Event) => void;\n};\n\n/**\n * Creates a React component for a custom element. Properties are distinguished\n * from attributes automatically, and events can be configured so they are\n * added to the custom element as event listeners.\n *\n * @param React The React module, typically imported from the `react` npm\n * package.\n * @param tagName The custom element tag name registered via\n * `customElements.define`.\n * @param elementClass The custom element class registered via\n * `customElements.define`.\n * @param events An object listing events to which the component can listen. The\n * object keys are the event property names passed in via React props and the\n * object values are the names of the corresponding events generated by the\n * custom element. For example, given `{onactivate: 'activate'}` an event\n * function may be passed via the component's `onactivate` prop and will be\n * called when the custom element fires its `activate` event.\n * @param displayName A React component display name, used in debugging\n * messages. Default value is inferred from the name of custom element class\n * registered via `customElements.define`.\n */\nexport const createComponent = <I extends HTMLElement, E extends Events = {}>(\n  React: typeof window.React,\n  tagName: string,\n  elementClass: Constructor<I>,\n  events?: E,\n  displayName?: string\n) => {\n  const Component = React.Component;\n  const createElement = React.createElement;\n  const eventProps = new Set(Object.keys(events ?? {}));\n\n  // Props the user is allowed to use, includes standard attributes, children,\n  // ref, as well as special event and element properties.\n  type ReactProps = Omit<React.HTMLAttributes<I>, keyof E>;\n  type ElementWithoutPropsOrEvents = Omit<I, keyof E | keyof ReactProps>;\n  type UserProps = Partial<\n    ReactProps & ElementWithoutPropsOrEvents & EventProps<E>\n  >;\n\n  // Props used by this component wrapper. This is the UserProps and the\n  // special `__forwardedRef` property. Note, this ref is special because\n  // it's both needed in this component to get access to the rendered element\n  // and must fulfill any ref passed by the user.\n  type ComponentProps = UserProps & {\n    __forwardedRef?: React.Ref<unknown>;\n  };\n\n  class ReactComponent extends Component<ComponentProps> {\n    private _element: I | null = null;\n    private _elementProps!: {[index: string]: unknown};\n    private _userRef?: React.Ref<unknown>;\n    private _ref?: React.RefCallback<I>;\n\n    static displayName = displayName ?? elementClass.name;\n\n    private _updateElement(oldProps?: ComponentProps) {\n      if (this._element === null) {\n        return;\n      }\n      // Set element properties to the values in `this.props`\n      for (const prop in this._elementProps) {\n        setProperty(\n          this._element,\n          prop,\n          this.props[prop as keyof ComponentProps],\n          oldProps ? oldProps[prop as keyof ComponentProps] : undefined,\n          events\n        );\n      }\n      // Note, the spirit of React might be to \"unset\" any old values that\n      // are no longer included; however, there's no reasonable value to set\n      // them to so we just leave the previous state as is.\n    }\n\n    /**\n     * Updates element properties correctly setting properties\n     * on mount.\n     */\n    override componentDidMount() {\n      this._updateElement();\n    }\n\n    /**\n     * Updates element properties correctly setting properties\n     * on every update. Note, this does not include mount.\n     */\n    override componentDidUpdate(old: ComponentProps) {\n      this._updateElement(old);\n    }\n\n    /**\n     * Renders the custom element with a `ref` prop which allows this\n     * component to reference the custom element.\n     *\n     * Standard attributes are passed to React and element properties and events\n     * are updated in componentDidMount/componentDidUpdate.\n     *\n     */\n    override render() {\n      // Since refs only get fulfilled once, pass a new one if the user's\n      // ref changed. This allows refs to be fulfilled as expected, going from\n      // having a value to null.\n      const userRef = this.props.__forwardedRef as React.Ref<unknown>;\n      if (this._ref === undefined || this._userRef !== userRef) {\n        this._ref = (value: I | null) => {\n          if (this._element === null) {\n            this._element = value;\n          }\n          if (userRef !== null) {\n            setRef(userRef, value);\n          }\n          this._userRef = userRef;\n        };\n      }\n      // Filters class properties out and passes the remaining\n      // attributes to React. This allows attributes to use framework rules\n      // for setting attributes and render correctly under SSR.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const props: any = {ref: this._ref};\n      // Note, save element props while iterating to avoid the need to\n      // iterate again when setting properties.\n      this._elementProps = {};\n      for (const [k, v] of Object.entries(this.props)) {\n        if (k === '__forwardedRef') continue;\n\n        if (\n          eventProps.has(k) ||\n          (!reservedReactProperties.has(k) &&\n            !(k in HTMLElement.prototype) &&\n            k in elementClass.prototype)\n        ) {\n          this._elementProps[k] = v;\n        } else {\n          // React does *not* handle `className` for custom elements so\n          // coerce it to `class` so it's handled correctly.\n          props[k === 'className' ? 'class' : k] = v;\n        }\n      }\n      return createElement(tagName, props);\n    }\n  }\n\n  const ForwardedComponent = React.forwardRef(\n    (props?: UserProps, ref?: React.Ref<unknown>) =>\n      createElement(\n        ReactComponent,\n        {...props, __forwardedRef: ref} as ComponentProps,\n        props?.children\n      )\n  );\n\n  // To ease debugging in the React Developer Tools\n  ForwardedComponent.displayName = ReactComponent.displayName;\n\n  return ForwardedComponent;\n};\n"],
  "mappings": ";;;AAMA,IAAM,0BAA0B,oBAAI,IAAI;EACtC;EACA;EACA;EACA;EACA;CACD;AAED,IAAM,iBAGF,oBAAI,QAAO;AAQf,IAAM,2BAA2B,CAC/B,MACA,OACA,aACE;AACF,MAAI,SAAS,eAAe,IAAI,IAAI;AACpC,MAAI,WAAW,QAAW;AACxB,mBAAe,IAAI,MAAO,SAAS,oBAAI,IAAG,CAAG;;AAE/C,MAAI,UAAU,OAAO,IAAI,KAAK;AAC9B,MAAI,aAAa,QAAW;AAE1B,QAAI,YAAY,QAAW;AACzB,aAAO,IAAI,OAAQ,UAAU,EAAC,aAAa,SAAQ,CAAE;AACrD,WAAK,iBAAiB,OAAO,OAAO;WAE/B;AACL,cAAQ,cAAc;;aAGf,YAAY,QAAW;AAChC,WAAO,OAAO,KAAK;AACnB,SAAK,oBAAoB,OAAO,OAAO;;AAE3C;AAMA,IAAM,cAAc,CAClB,MACA,MACA,OACA,KACA,WACE;AACF,QAAM,QAAQ,WAAM,QAAN,WAAM,SAAA,SAAN,OAAS;AACvB,MAAI,UAAU,QAAW;AAEvB,QAAI,UAAU,KAAK;AACjB,+BAAyB,MAAM,OAAO,KAA4B;;SAE/D;AAEL,SAAK,QAAmB;;AAE5B;AAIA,IAAM,SAAS,CAAC,KAAyB,UAAyB;AAChE,MAAI,OAAO,QAAQ,YAAY;AAC5B,QAAoC,KAAK;SACrC;AACJ,QAAkC,UAAU;;AAEjD;AAyCO,IAAM,kBAAkB,CAC7B,OACA,SACA,cACA,QACA,gBACE;AACF,QAAM,YAAY,MAAM;AACxB,QAAM,gBAAgB,MAAM;AAC5B,QAAM,aAAa,IAAI,IAAI,OAAO,KAAK,WAAM,QAAN,WAAM,SAAN,SAAU,CAAA,CAAE,CAAC;AAkBpD,QAAM,uBAAuB,UAAyB;IAAtD,cAAA;;AACU,WAAA,WAAqB;IA4F/B;IArFU,eAAe,UAAyB;AAC9C,UAAI,KAAK,aAAa,MAAM;AAC1B;;AAGF,iBAAW,QAAQ,KAAK,eAAe;AACrC,oBACE,KAAK,UACL,MACA,KAAK,MAAM,OACX,WAAW,SAAS,QAAgC,QACpD,MAAM;;IAMZ;IAMS,oBAAiB;AACxB,WAAK,eAAc;IACrB;IAMS,mBAAmB,KAAmB;AAC7C,WAAK,eAAe,GAAG;IACzB;IAUS,SAAM;AAIb,YAAM,UAAU,KAAK,MAAM;AAC3B,UAAI,KAAK,SAAS,UAAa,KAAK,aAAa,SAAS;AACxD,aAAK,OAAO,CAAC,UAAmB;AAC9B,cAAI,KAAK,aAAa,MAAM;AAC1B,iBAAK,WAAW;;AAElB,cAAI,YAAY,MAAM;AACpB,mBAAO,SAAS,KAAK;;AAEvB,eAAK,WAAW;QAClB;;AAMF,YAAM,QAAa,EAAC,KAAK,KAAK,KAAI;AAGlC,WAAK,gBAAgB,CAAA;AACrB,iBAAW,CAAC,GAAG,CAAC,KAAK,OAAO,QAAQ,KAAK,KAAK,GAAG;AAC/C,YAAI,MAAM;AAAkB;AAE5B,YACE,WAAW,IAAI,CAAC,KACf,CAAC,wBAAwB,IAAI,CAAC,KAC7B,EAAE,KAAK,YAAY,cACnB,KAAK,aAAa,WACpB;AACA,eAAK,cAAc,KAAK;eACnB;AAGL,gBAAM,MAAM,cAAc,UAAU,KAAK;;;AAG7C,aAAO,cAAc,SAAS,KAAK;IACrC;;AAtFO,iBAAA,cAAc,gBAAW,QAAX,gBAAW,SAAX,cAAe,aAAa;AAyFnD,QAAM,qBAAqB,MAAM,WAC/B,CAAC,OAAmB,QAClB,cACE,gBACA,EAAC,GAAG,OAAO,gBAAgB,IAAG,GAC9B,UAAK,QAAL,UAAK,SAAA,SAAL,MAAO,QAAQ,CAChB;AAIL,qBAAmB,cAAc,eAAe;AAEhD,SAAO;AACT;",
  "names": []
}
